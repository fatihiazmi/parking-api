openapi: 3.0.3
info:
  title: Laravel
  description: ''
  version: 1.0.0
servers:
  -
    url: 'http://parking-api.test'
paths:
  /api/auth/register:
    post:
      summary: ''
      operationId: postApiAuthRegister
      description: ''
      parameters: []
      responses: {  }
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: nzhrzqrjcdellfrqrijluhfoe
                email:
                  type: string
                  description: 'Must be a valid email address. Must not be greater than 255 characters.'
                  example: rogers50@example.net
                password:
                  type: string
                  description: ''
                  example: expedita
              required:
                - name
                - email
                - password
      security: []
  /api/auth/login:
    post:
      summary: ''
      operationId: postApiAuthLogin
      description: ''
      parameters: []
      responses: {  }
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  description: 'Must be a valid email address.'
                  example: yazmin89@example.net
                password:
                  type: string
                  description: ''
                  example: tenetur
              required:
                - email
                - password
      security: []
  /api/profile:
    get:
      summary: ''
      operationId: getApiProfile
      description: ''
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - Auth
      security: []
    put:
      summary: ''
      operationId: putApiProfile
      description: ''
      parameters: []
      responses: {  }
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: ''
                  example: maiores
                email:
                  type: string
                  description: 'Must be a valid email address.'
                  example: barrows.jimmy@example.com
              required:
                - name
                - email
      security: []
  /api/password:
    put:
      summary: ''
      operationId: putApiPassword
      description: ''
      parameters: []
      responses: {  }
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                current_password:
                  type: string
                  description: ''
                  example: unde
                password:
                  type: string
                  description: ''
                  example: ab
              required:
                - current_password
                - password
      security: []
  /api/auth/logout:
    post:
      summary: ''
      operationId: postApiAuthLogout
      description: ''
      parameters: []
      responses: {  }
      tags:
        - Endpoints
      security: []
  /api/parkings/start:
    post:
      summary: ''
      operationId: postApiParkingsStart
      description: ''
      parameters: []
      responses: {  }
      tags:
        - Parking
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                vehicle_id:
                  type: integer
                  description: ''
                  example: 2
                zone_id:
                  type: integer
                  description: ''
                  example: 20
              required:
                - vehicle_id
                - zone_id
      security: []
  '/api/parkings/{parking_id}':
    get:
      summary: ''
      operationId: getApiParkingsParking_id
      description: ''
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - Parking
      security: []
    put:
      summary: ''
      operationId: putApiParkingsParking_id
      description: ''
      parameters: []
      responses: {  }
      tags:
        - Parking
      security: []
    parameters:
      -
        in: path
        name: parking_id
        description: 'The ID of the parking.'
        example: 18
        required: true
        schema:
          type: integer
  /api/vehicles:
    get:
      summary: 'Display a listing of the resource.'
      operationId: displayAListingOfTheResource
      description: ''
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - Vehicles
      security: []
    post:
      summary: 'Store a newly created resource in storage.'
      operationId: storeANewlyCreatedResourceInStorage
      description: ''
      parameters: []
      responses: {  }
      tags:
        - Vehicles
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                plate_num:
                  type: string
                  description: ''
                  example: perspiciatis
              required:
                - plate_num
      security: []
  '/api/vehicles/{id}':
    get:
      summary: 'Display the specified resource.'
      operationId: displayTheSpecifiedResource
      description: ''
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - Vehicles
      security: []
    put:
      summary: 'Update the specified resource in storage.'
      operationId: updateTheSpecifiedResourceInStorage
      description: ''
      parameters: []
      responses: {  }
      tags:
        - Vehicles
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                plate_num:
                  type: string
                  description: ''
                  example: et
              required:
                - plate_num
      security: []
    delete:
      summary: 'Remove the specified resource from storage.'
      operationId: removeTheSpecifiedResourceFromStorage
      description: ''
      parameters: []
      responses: {  }
      tags:
        - Vehicles
      security: []
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the vehicle.'
        example: 16
        required: true
        schema:
          type: integer
  /api/zones:
    get:
      summary: ''
      operationId: getApiZones
      description: ''
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  data:
                    -
                      id: 1
                      name: General
                      hourly_rate: 100
                    -
                      id: 2
                      name: Premium
                      hourly_rate: 200
                    -
                      id: 3
                      name: Deluxe
                      hourly_rate: 300
                properties:
                  data:
                    type: array
                    example:
                      -
                        id: 1
                        name: General
                        hourly_rate: 100
                      -
                        id: 2
                        name: Premium
                        hourly_rate: 200
                      -
                        id: 3
                        name: Deluxe
                        hourly_rate: 300
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                          example: 1
                        name:
                          type: string
                          example: General
                        hourly_rate:
                          type: integer
                          example: 100
      tags:
        - Zones
      security: []
tags:
  -
    name: Auth
    description: ''
  -
    name: Endpoints
    description: ''
  -
    name: Parking
    description: ''
  -
    name: Vehicles
    description: ''
  -
    name: Zones
    description: ''
components:
  securitySchemes:
    default:
      type: http
      scheme: bearer
      description: 'You can retrieve your token by visiting your dashboard and clicking <b>Generate API token</b>.'
security:
  -
    default: []
